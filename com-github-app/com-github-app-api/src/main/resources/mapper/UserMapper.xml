<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.app.api.dal.dao.UserMapper">
    <resultMap id="BaseResultMap" type="com.github.app.api.dal.domain.User">
        <id column="number" property="number" jdbcType="INTEGER"/>
        <result column="account" property="account" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="mobile" property="mobile" jdbcType="VARCHAR"/>
        <result column="is_enable" property="isEnable" jdbcType="SMALLINT"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="photo_url" property="photoUrl" jdbcType="VARCHAR"/>
        <result column="parent_number" property="parentNumber" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="com.github.app.api.dal.domain.User" extends="BaseResultMap">
        <result column="remark" property="remark" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <resultMap id="ResultMapWithRole" type="com.github.app.api.dal.domain.User" extends="BaseResultMap">
        <association property="role" resultMap="com.github.app.api.dal.dao.RoleMapper.BaseResultMap" columnPrefix="role_"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    number, account, password, name, sex, email, mobile, is_enable, address, photo_url, 
    parent_number
  </sql>
    <sql id="Blob_Column_List">
    remark
  </sql>
    <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs"
            parameterType="com.github.app.api.dal.domain.UserExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from T_USER
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.github.app.api.dal.domain.UserExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from T_USER
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExampleWithRole" resultMap="ResultMapWithRole" parameterType="com.github.app.api.dal.domain.UserExample">
        select
        u.number as number,
        u.account as account,
        u.name as name,
        u.sex as sex,
        u.email as email,
        u.mobile as mobile,
        u.is_enable as is_enable,
        u.address as address,
        u.photo_url as photo_url,
        u.parent_number as parent_number,
        r.number as role_number,
        r.name as role_name
        from T_USER u left join T_REL_ROLE_USER ru on ru.user_number=u.number
        left join T_ROLE r on ru.role_number=r.number
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from T_USER
        where number = #{number,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from T_USER
    where number = #{number,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.github.app.api.dal.domain.UserExample">
        delete from T_USER
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.github.app.api.dal.domain.User">
    insert into T_USER (number, account, password, 
      name, sex, email, mobile, 
      is_enable, address, photo_url, 
      parent_number, remark)
    values (#{number,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, 
      #{isEnable,jdbcType=SMALLINT}, #{address,jdbcType=VARCHAR}, #{photoUrl,jdbcType=VARCHAR}, 
      #{parentNumber,jdbcType=INTEGER}, #{remark,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.github.app.api.dal.domain.User">
        insert into T_USER
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="number != null">
                number,
            </if>
            <if test="account != null">
                account,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="mobile != null">
                mobile,
            </if>
            <if test="isEnable != null">
                is_enable,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="photoUrl != null">
                photo_url,
            </if>
            <if test="parentNumber != null">
                parent_number,
            </if>
            <if test="remark != null">
                remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="number != null">
                #{number,jdbcType=INTEGER},
            </if>
            <if test="account != null">
                #{account,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="mobile != null">
                #{mobile,jdbcType=VARCHAR},
            </if>
            <if test="isEnable != null">
                #{isEnable,jdbcType=SMALLINT},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="photoUrl != null">
                #{photoUrl,jdbcType=VARCHAR},
            </if>
            <if test="parentNumber != null">
                #{parentNumber,jdbcType=INTEGER},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.github.app.api.dal.domain.UserExample"
            resultType="java.lang.Integer">
        select count(*) from T_USER
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update T_USER
        <set>
            <if test="record.number != null">
                number = #{record.number,jdbcType=INTEGER},
            </if>
            <if test="record.account != null">
                account = #{record.account,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                password = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.sex != null">
                sex = #{record.sex,jdbcType=VARCHAR},
            </if>
            <if test="record.email != null">
                email = #{record.email,jdbcType=VARCHAR},
            </if>
            <if test="record.mobile != null">
                mobile = #{record.mobile,jdbcType=VARCHAR},
            </if>
            <if test="record.isEnable != null">
                is_enable = #{record.isEnable,jdbcType=SMALLINT},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.photoUrl != null">
                photo_url = #{record.photoUrl,jdbcType=VARCHAR},
            </if>
            <if test="record.parentNumber != null">
                parent_number = #{record.parentNumber,jdbcType=INTEGER},
            </if>
            <if test="record.remark != null">
                remark = #{record.remark,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update T_USER
        set number = #{record.number,jdbcType=INTEGER},
        account = #{record.account,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=VARCHAR},
        name = #{record.name,jdbcType=VARCHAR},
        sex = #{record.sex,jdbcType=VARCHAR},
        email = #{record.email,jdbcType=VARCHAR},
        mobile = #{record.mobile,jdbcType=VARCHAR},
        is_enable = #{record.isEnable,jdbcType=SMALLINT},
        address = #{record.address,jdbcType=VARCHAR},
        photo_url = #{record.photoUrl,jdbcType=VARCHAR},
        parent_number = #{record.parentNumber,jdbcType=INTEGER},
        remark = #{record.remark,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update T_USER
        set number = #{record.number,jdbcType=INTEGER},
        account = #{record.account,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=VARCHAR},
        name = #{record.name,jdbcType=VARCHAR},
        sex = #{record.sex,jdbcType=VARCHAR},
        email = #{record.email,jdbcType=VARCHAR},
        mobile = #{record.mobile,jdbcType=VARCHAR},
        is_enable = #{record.isEnable,jdbcType=SMALLINT},
        address = #{record.address,jdbcType=VARCHAR},
        photo_url = #{record.photoUrl,jdbcType=VARCHAR},
        parent_number = #{record.parentNumber,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.github.app.api.dal.domain.User">
        update T_USER
        <set>
            <if test="account != null">
                account = #{account,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="mobile != null">
                mobile = #{mobile,jdbcType=VARCHAR},
            </if>
            <if test="isEnable != null">
                is_enable = #{isEnable,jdbcType=SMALLINT},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="photoUrl != null">
                photo_url = #{photoUrl,jdbcType=VARCHAR},
            </if>
            <if test="parentNumber != null">
                parent_number = #{parentNumber,jdbcType=INTEGER},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where number = #{number,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.github.app.api.dal.domain.User">
    update T_USER
    set account = #{account,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      is_enable = #{isEnable,jdbcType=SMALLINT},
      address = #{address,jdbcType=VARCHAR},
      photo_url = #{photoUrl,jdbcType=VARCHAR},
      parent_number = #{parentNumber,jdbcType=INTEGER},
      remark = #{remark,jdbcType=LONGVARCHAR}
    where number = #{number,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.github.app.api.dal.domain.User">
    update T_USER
    set account = #{account,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      is_enable = #{isEnable,jdbcType=SMALLINT},
      address = #{address,jdbcType=VARCHAR},
      photo_url = #{photoUrl,jdbcType=VARCHAR},
      parent_number = #{parentNumber,jdbcType=INTEGER}
    where number = #{number,jdbcType=INTEGER}
  </update>
</mapper>